// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/user_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "go_social_app/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ActivationUser mocks base method.
func (m *MockUserService) ActivationUser(request model.UserActivationInput) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivationUser", request)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivationUser indicates an expected call of ActivationUser.
func (mr *MockUserServiceMockRecorder) ActivationUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivationUser", reflect.TypeOf((*MockUserService)(nil).ActivationUser), request)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), userID)
}

// FollowUser mocks base method.
func (m *MockUserService) FollowUser(request model.FollowInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockUserServiceMockRecorder) FollowUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockUserService)(nil).FollowUser), request)
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(request model.GetUserByIDInput) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", request)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), request)
}

// GetUserFeed mocks base method.
func (m *MockUserService) GetUserFeed(request model.UserFeedRequest) ([]model.UserFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFeed", request)
	ret0, _ := ret[0].([]model.UserFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFeed indicates an expected call of GetUserFeed.
func (mr *MockUserServiceMockRecorder) GetUserFeed(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFeed", reflect.TypeOf((*MockUserService)(nil).GetUserFeed), request)
}

// LoginUser mocks base method.
func (m *MockUserService) LoginUser(request model.UserLoginInput) (model.UserWithToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", request)
	ret0, _ := ret[0].(model.UserWithToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserServiceMockRecorder) LoginUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserService)(nil).LoginUser), request)
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(request model.UserRegiterInput) (model.UserWithToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", request)
	ret0, _ := ret[0].(model.UserWithToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), request)
}

// UnfollowUser mocks base method.
func (m *MockUserService) UnfollowUser(request model.FollowInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowUser", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnfollowUser indicates an expected call of UnfollowUser.
func (mr *MockUserServiceMockRecorder) UnfollowUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockUserService)(nil).UnfollowUser), request)
}
